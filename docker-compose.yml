version: "3.7"
services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.11-management
    restart: always
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
  postgres:
    container_name: postgres
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    expose:
      - 5432
    environment:
      - POSTGRES_MULTIPLE_DATABASES="postgres-user", "postgres-profile"
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ../docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
    networks:
      - backend
  profile:
    container_name: profile
    build:
      context: .
      dockerfile: ./apps/profile/Dockerfile
      target: development
    command: npm run start:dev profile
    restart: always
    networks:
      - backend
    env_file:
      - ./apps/profile/.env
    depends_on:
      rabbitmq: 
        condition: service_started
      postgres:
        condition: service_started
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '4000:4000'
  auth:
    container_name: auth
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: npm run start:dev auth
    restart: always
    networks:
      - backend
    env_file:
      - ./apps/auth/.env
    depends_on:
      rabbitmq: 
        condition: service_started
      postgres:
        condition: service_started
      profile: 
        condition: service_started
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
networks:
  backend:
    driver: bridge
volumes:
  rabbit_data:
    driver: local
  pg_data:
    driver: local
  